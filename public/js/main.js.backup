const API_BASE_URL = '/api';

// Utilitários
const utils = {
    // Formatar data
    formatDate(dateString) {
        const date = new Date(dateString);
        return date.toLocaleDateString('pt-BR', {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
    },

    // Truncar texto
    truncateText(text, maxLength) {
        if (text.length <= maxLength) return text;
        return text.substring(0, maxLength) + '...';
    },

    // Mostrar mensagem
    showMessage(message, type = 'info') {
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${type}`;
        messageDiv.textContent = message;
        
        // Inserir no topo da página
        const container = document.querySelector('.container') || document.body;
        container.insertBefore(messageDiv, container.firstChild);
        
        // Remover após 5 segundos
        setTimeout(() => {
            messageDiv.remove();
        }, 5000);
    },

    // Debounce para busca
    debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }
};

// ===== CARROSSEL DE NOTÍCIAS =====
class NewsCarousel {
    constructor() {
        this.currentSlide = 0;
        this.slides = [];
        this.autoSlideInterval = null;
        this.isLoading = false;
        
        this.init();
    }
    
    async init() {
        try {
            await this.loadCarouselNews();
            this.setupEventListeners();
            this.startAutoSlide();
        } catch (error) {
            console.error('Erro ao inicializar carrossel:', error);
            this.showError();
        }
    }
    
    async loadCarouselNews() {
        if (this.isLoading) return;
        this.isLoading = true;
        
        try {
            const response = await fetch('/api/news/carousel?limit=5');
            const data = await response.json();
            
            if (data.success && data.data.length > 0) {
                this.slides = data.data;
                this.renderCarousel();
            } else {
                this.showEmptyState();
            }
        } catch (error) {
            console.error('Erro ao carregar notícias do carrossel:', error);
            this.showError();
        } finally {
            this.isLoading = false;
        }
    }
    
    renderCarousel() {
        const container = document.querySelector('.carousel-container');
        if (!container) return;
        
        container.innerHTML = `
            <div class="carousel-slides">
                ${this.slides.map((slide, index) => `
                    <div class="carousel-slide ${index === 0 ? 'active' : ''}" data-slide="${index}">
                        <div class="slide-content">
                            <div class="slide-category">${slide.category}</div>
                            <h2 class="slide-title">${slide.title}</h2>
                            <p class="slide-summary">${slide.summary}</p>
                            <div class="slide-meta">
                                <span>Por ${slide.author}</span>
                                <span>${utils.formatDate(slide.createdAt)}</span>
                                <span>${slide.views || 0} visualizações</span>
                            </div>
                            <a href="/news/${slide.id}" class="slide-cta">Ler Matéria</a>
                        </div>
                        ${slide.imageUrl ? `<div class="slide-image" style="background-image: url('${slide.imageUrl}')"></div>` : ''}
                    </div>
                `).join('')}
            </div>
            <div class="carousel-controls">
                <button class="carousel-btn prev" aria-label="Slide anterior">
                    <span class="material-icons">chevron_left</span>
                </button>
                <button class="carousel-btn next" aria-label="Próximo slide">
                    <span class="material-icons">chevron_right</span>
                </button>
            </div>
            <div class="carousel-indicators">
                ${this.slides.map((_, index) => `
                    <button class="indicator ${index === 0 ? 'active' : ''}" 
                            data-slide="${index}" 
                            aria-label="Ir para slide ${index + 1}"></button>
                `).join('')}
            </div>
        `;
        
        this.setupCarouselEvents();
    }
    
    setupCarouselEvents() {
        // Botões de navegação
        const prevBtn = document.querySelector('.carousel-btn.prev');
        const nextBtn = document.querySelector('.carousel-btn.next');
        
        if (prevBtn) prevBtn.addEventListener('click', () => this.prevSlide());
        if (nextBtn) nextBtn.addEventListener('click', () => this.nextSlide());
        
        // Indicadores
        const indicators = document.querySelectorAll('.carousel-indicators .indicator');
        indicators.forEach(indicator => {
            indicator.addEventListener('click', () => {
                const slideIndex = parseInt(indicator.dataset.slide);
                this.goToSlide(slideIndex);
            });
        });
        
        // Pausar auto-slide no hover
        const carousel = document.querySelector('.carousel-container');
        if (carousel) {
            carousel.addEventListener('mouseenter', () => this.pauseAutoSlide());
            carousel.addEventListener('mouseleave', () => this.startAutoSlide());
        }
    }
    
    setupEventListeners() {
        // Navegação por teclado
        document.addEventListener('keydown', (e) => {
            if (e.key === 'ArrowLeft') this.prevSlide();
            if (e.key === 'ArrowRight') this.nextSlide();
        });
    }
    
    goToSlide(index) {
        if (index < 0 || index >= this.slides.length) return;
        
        // Remover classe active do slide atual
        const currentSlide = document.querySelector('.carousel-slide.active');
        const currentIndicator = document.querySelector('.carousel-indicators .indicator.active');
        
        if (currentSlide) currentSlide.classList.remove('active');
        if (currentIndicator) currentIndicator.classList.remove('active');
        
        // Adicionar classe active ao novo slide
        const newSlide = document.querySelector(`[data-slide="${index}"]`);
        const newIndicator = document.querySelector(`.carousel-indicators .indicator[data-slide="${index}"]`);
        
        if (newSlide) newSlide.classList.add('active');
        if (newIndicator) newIndicator.classList.add('active');
        
        this.currentSlide = index;
    }
    
    nextSlide() {
        const nextIndex = (this.currentSlide + 1) % this.slides.length;
        this.goToSlide(nextIndex);
    }
    
    prevSlide() {
        const prevIndex = this.currentSlide === 0 ? this.slides.length - 1 : this.currentSlide - 1;
        this.goToSlide(prevIndex);
    }
    
    startAutoSlide() {
        this.pauseAutoSlide();
        this.autoSlideInterval = setInterval(() => {
            this.nextSlide();
        }, 5000);
    }
    
    pauseAutoSlide() {
        if (this.autoSlideInterval) {
            clearInterval(this.autoSlideInterval);
            this.autoSlideInterval = null;
        }
    }
    
    showEmptyState() {
        const container = document.querySelector('.carousel-container');
        if (container) {
            container.innerHTML = `
                <div class="carousel-empty">
                    <span class="material-icons">photo_library</span>
                    <h3>Nenhuma notícia em destaque</h3>
                    <p>Adicione notícias ao carrossel para exibi-las aqui.</p>
                </div>
            `;
        }
    }
    
    showError() {
        const container = document.querySelector('.carousel-container');
        if (container) {
            container.innerHTML = `
                <div class="carousel-error">
                    <span class="material-icons">error_outline</span>
                    <h3>Erro ao carregar notícias principais</h3>
                    <button class="btn btn-primary" onclick="carousel.loadCarouselNews()">
                        <span class="material-icons">refresh</span>
                        Tentar Novamente
                    </button>
                </div>
            `;
        }
    }
}

// ===== POSTAGEM DE NOTÍCIAS =====
class NewsPosting {
    constructor() {
        this.init();
    }
    
    init() {
        this.setupEventListeners();
    }
    
    setupEventListeners() {
        // Botão postar notícia
        const postBtn = document.getElementById('post-news-btn');
        if (postBtn) {
            postBtn.addEventListener('click', () => this.openPostModal());
        }
        
        // Botão gerenciar carrossel
        const manageBtn = document.getElementById('manage-carousel-btn');
        if (manageBtn) {
            manageBtn.addEventListener('click', () => this.openCarouselManager());
        }
        
        // Modal
        const modal = document.getElementById('post-news-modal');
        const closeBtn = document.getElementById('close-news-modal');
        const cancelBtn = document.getElementById('cancel-news');
        
        if (closeBtn) {
            closeBtn.addEventListener('click', () => this.closePostModal());
        }
        
        if (cancelBtn) {
            cancelBtn.addEventListener('click', () => this.closePostModal());
        }
        
        if (modal) {
            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                    this.closePostModal();
                }
            });
        }
        
        // Formulário
        const form = document.getElementById('post-news-form');
        if (form) {
            form.addEventListener('submit', (e) => this.handlePostNews(e));
        }
    }
    
    openPostModal() {
        const modal = document.getElementById('post-news-modal');
        if (modal) {
            modal.style.display = 'flex';
            document.body.style.overflow = 'hidden';
        }
    }
    
    closePostModal() {
        const modal = document.getElementById('post-news-modal');
        if (modal) {
            modal.style.display = 'none';
            document.body.style.overflow = 'auto';
            
            // Limpar formulário
            const form = document.getElementById('post-news-form');
            if (form) {
                form.reset();
            }
        }
    }
    
    openCarouselManager() {
        window.location.href = '/admin/carousel';
    }
    
    async handlePostNews(e) {
        e.preventDefault();
        
        const formData = new FormData(e.target);
        const newsData = {
            title: formData.get('title'),
            category: formData.get('category'),
            summary: formData.get('summary'),
            content: formData.get('content'),
            author: formData.get('author'),
            imageUrl: formData.get('imageUrl') || null,
            featured: formData.get('featured') === 'on',
            published: true
        };
        
        try {
            // Mostrar loading
            const submitBtn = e.target.querySelector('button[type="submit"]');
            const originalText = submitBtn.innerHTML;
            submitBtn.innerHTML = '<span class="material-icons">hourglass_empty</span> Publicando...';
            submitBtn.disabled = true;
            
            const response = await fetch('/api/news', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(newsData)
            });
            
            const data = await response.json();
            
            if (data.success) {
                utils.showMessage('Notícia publicada com sucesso!', 'success');
                this.closePostModal();
                
                // Recarregar a página para mostrar a nova notícia
                setTimeout(() => {
                    window.location.reload();
                }, 1500);
            } else {
                throw new Error(data.message || 'Erro ao publicar notícia');
            }
        } catch (error) {
            console.error('Erro ao publicar notícia:', error);
            utils.showMessage('Erro ao publicar notícia: ' + error.message, 'error');
        } finally {
            // Restaurar botão
            const submitBtn = e.target.querySelector('button[type="submit"]');
            submitBtn.innerHTML = '<span class="material-icons">send</span> Publicar Notícia';
            submitBtn.disabled = false;
        }
    }
}

// ===== PÁGINA INICIAL - CONTEÚDO DINÂMICO =====
class HomePage {
    constructor() {
        this.currentPage = 1;
        this.currentCategory = '';
        this.isLoading = false;
        
        this.init();
    }
    
    async init() {
        try {
            await this.loadFeaturedNews();
            await this.loadLatestNews();
            await this.loadForumDiscussions();
            this.setupEventListeners();
        } catch (error) {
            console.error('Erro ao inicializar página inicial:', error);
        }
    }
    
    async loadFeaturedNews() {
        try {
            const response = await fetch('/api/news?featured=true&limit=3');
            const data = await response.json();
            
            if (data.success && data.data && data.data.length > 0) {
                this.renderFeaturedNews(data.data);
            } else {
                this.showEmptyFeaturedNews();
            }
        } catch (error) {
            console.error('Erro ao carregar notícias em destaque:', error);
        }
    }
    
    async loadLatestNews(page = 1, category = '') {
        if (this.isLoading) return;
        this.isLoading = true;
        
        try {
            const params = new URLSearchParams({
                page: page,
                limit: 6
            });
            
            if (category) {
                params.append('category', category);
            }
            
            const response = await fetch(`/api/news?${params}`);
            const data = await response.json();
            
            if (data.success) {
                this.renderLatestNews(data.data, page === 1);
            }
        } catch (error) {
            console.error('Erro ao carregar últimas notícias:', error);
        } finally {
            this.isLoading = false;
        }
    }
    
    async loadForumDiscussions() {
        try {
            const response = await fetch("/api/forum");
            const data = await response.json();
            
            if (data.success) {
                this.renderForumDiscussions(data.data);
            }
        } catch (error) {
            console.error('Erro ao carregar discussões do fórum:', error);
            this.renderForumError();
        }
    }
    
    renderFeaturedNews(news) {
        const container = document.querySelector('.featured-news-list');
        if (!container || news.length === 0) return;
        
        container.innerHTML = news.map(item => `
            <article class="featured-news-item">
                <div class="news-category">${item.category}</div>
                <h3><a href="/news/${item.id}">${item.title}</a></h3>
                <p>${item.summary}</p>
                <div class="news-meta">
                    <span>Por ${item.author}</span>
                    <span>${utils.formatDate(item.createdAt)}</span>
                </div>
            </article>
        `).join('');
    }
    
    renderLatestNews(news, replace = true) {
        const container = document.querySelector('.latest-news-list');
        if (!container) return;
        
        if (replace) {
            container.innerHTML = '';
        }
        
        if (news.length === 0 && replace) {
            container.innerHTML = `
                <div class="empty-state">
                    <span class="material-icons">article</span>
                    <h3>Nenhuma notícia encontrada</h3>
                    <p>Não há notícias para exibir no momento.</p>
                </div>
            `;
            return;
        }
        
        const newsHTML = news.map(item => `
            <article class="news-card" data-news-id="${item.id}">
                <div class="news-card-header">
                    <div class="news-category">${item.category}</div>
                    <div class="news-actions">
                        <button class="btn-delete-news" onclick="homePage.deleteNews(${item.id})" title="Excluir notícia">
                            <span class="material-icons">delete</span>
                        </button>
                    </div>
                </div>
                <h3><a href="/news/${item.id}">${item.title}</a></h3>
                <p>${utils.truncateText(item.summary, 150)}</p>
                <div class="news-meta">
                    <span>Por ${item.author}</span>
                    <span>${utils.formatDate(item.createdAt)}</span>
                    <span>${item.views || 0} visualizações</span>
                </div>
            </article>
        `).join('');
        
        container.insertAdjacentHTML('beforeend', newsHTML);
    }
    
    renderForumDiscussions(topics) {
        const container = document.querySelector('.forum-discussions-list');
        if (!container) return;
        
        if (topics.length === 0) {
            container.innerHTML = `
                <div class="empty-state">
                    <span class="material-icons">forum</span>
                    <h3>Nenhuma discussão encontrada</h3>
                    <p>Seja o primeiro a criar um tópico no fórum!</p>
                    <a href="/forum" class="btn btn-primary">Ir para o Fórum</a>
                </div>
            `;
            return;
        }
        
        container.innerHTML = topics.map(topic => `
            <div class="forum-topic">
                <h4><a href="/forum/${topic.id}">${topic.title}</a></h4>
                <p>${utils.truncateText(topic.description, 100)}</p>
                <div class="topic-meta">
                    <span>Por ${topic.author}</span>
                    <span>${topic._count?.posts || 0} respostas</span>
                </div>
            </div>
        `).join('');
    }
    
    renderForumError() {
        const container = document.querySelector('.forum-discussions-list');
        if (container) {
            container.innerHTML = `
                <div class="error-state">
                    <span class="material-icons">error_outline</span>
                    <p>Erro ao carregar discussões do fórum</p>
                </div>
            `;
        }
    }
    
    setupEventListeners() {
        // Filtros de categoria
        const categoryButtons = document.querySelectorAll('.category-filter');
        categoryButtons.forEach(button => {
            button.addEventListener('click', () => {
                // Remover classe active de todos os botões
                categoryButtons.forEach(btn => btn.classList.remove('active'));
                // Adicionar classe active ao botão clicado
                button.classList.add('active');
                
                const category = button.dataset.category || '';
                this.currentCategory = category;
                this.currentPage = 1;
                this.loadLatestNews(1, category);
            });
        });
        
        // Botão carregar mais
        const loadMoreBtn = document.querySelector('.load-more-news');
        if (loadMoreBtn) {
            loadMoreBtn.addEventListener('click', () => {
                this.currentPage++;
                this.loadLatestNews(this.currentPage, this.currentCategory);
            });
        }
        
        // Busca
        const searchInput = document.querySelector('.search-input');
        if (searchInput) {
            searchInput.addEventListener('input', utils.debounce(() => {
                this.handleSearch(searchInput.value);
            }, 500));
        }
    }
    
    async handleSearch(query) {
        if (!query.trim()) {
            this.loadLatestNews(1, this.currentCategory);
            return;
        }
        
        try {
            const response = await fetch(`/api/news/search?q=${encodeURIComponent(query)}`);
            const data = await response.json();
            
            if (data.success) {
                this.renderLatestNews(data.data, true);
            }
        } catch (error) {
            console.error('Erro ao buscar notícias:', error);
        }
    }
    
    async deleteNews(newsId) {
        if (!confirm('Tem certeza que deseja excluir esta notícia? Esta ação não pode ser desfeita.')) {
            return;
        }
        
        try {
            const response = await fetch(`/api/news/${newsId}`, {
                method: 'DELETE'
            });
            
            const data = await response.json();
            
            if (data.success) {
                utils.showMessage('Notícia excluída com sucesso!', 'success');
                // Remover o card da interface
                const newsCard = document.querySelector(`[data-news-id="${newsId}"]`);
                if (newsCard) {
                    newsCard.remove();
                }
                // Recarregar as notícias
                await this.loadLatestNews(1, this.currentCategory);
            } else {
                throw new Error(data.message || 'Erro ao excluir notícia');
            }
        } catch (error) {
            console.error('Erro ao excluir notícia:', error);
            utils.showMessage('Erro ao excluir notícia', 'error');
        }
    }
}

// Inicializar componentes
let carousel, newsPosting, homePage;

document.addEventListener('DOMContentLoaded', function() {
    // Inicializar apenas na página inicial
    if (window.location.pathname === '/' || window.location.pathname === '/index.html') {
        carousel = new NewsCarousel();
        newsPosting = new NewsPosting();
        homePage = new HomePage();
    }
});

